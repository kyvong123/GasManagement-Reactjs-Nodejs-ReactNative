diff --git a/node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js b/node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js
index 14aba8f..ef712b6 100644
--- a/node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js
+++ b/node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js
@@ -10,7 +10,7 @@
 
 'use strict';
 
-import type {TurboModule} from '../TurboModule/RCTExport';
+import type { TurboModule } from '../TurboModule/RCTExport';
 import * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';
 
 // TODO: Use proper enum types.
@@ -43,18 +43,20 @@ export type PermissionType =
   | 'android.permission.RECEIVE_WAP_PUSH'
   | 'android.permission.RECEIVE_MMS'
   | 'android.permission.READ_EXTERNAL_STORAGE'
+  | 'android.permission.BLUETOOTH_CONNECT'
+  | 'android.permission.BLUETOOTH_SCAN'
   | 'android.permission.WRITE_EXTERNAL_STORAGE';
 */
 
 export interface Spec extends TurboModule {
-  +checkPermission: (permission: PermissionType) => Promise<boolean>;
-  +requestPermission: (permission: PermissionType) => Promise<PermissionStatus>;
-  +shouldShowRequestPermissionRationale: (
-    permission: string,
-  ) => Promise<boolean>;
-  +requestMultiplePermissions: (
-    permissions: Array<PermissionType>,
-  ) => Promise<{[permission: PermissionType]: PermissionStatus, ...}>;
+  +checkPermission: (permission: PermissionType) => Promise < boolean >;
++requestPermission: (permission: PermissionType) => Promise < PermissionStatus >;
++shouldShowRequestPermissionRationale: (
+  permission: string,
+) => Promise < boolean >;
++requestMultiplePermissions: (
+  permissions: Array<PermissionType>,
+) => Promise < { [permission: PermissionType]: PermissionStatus, ...} >;
 }
 
-export default (TurboModuleRegistry.get<Spec>('PermissionsAndroid'): ?Spec);
+export default (TurboModuleRegistry.get < Spec > ('PermissionsAndroid'): ?Spec);
diff --git a/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js b/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
index 83124cc..74ddb23 100644
--- a/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
+++ b/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
@@ -61,6 +61,8 @@ const PERMISSIONS = Object.freeze({
   RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
   READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
   WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
+  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
+  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
 });
 
 /**
@@ -72,84 +74,86 @@ const PERMISSIONS = Object.freeze({
 class PermissionsAndroid {
   PERMISSIONS: {|
     ACCESS_BACKGROUND_LOCATION: string,
-    ACCESS_COARSE_LOCATION: string,
-    ACCESS_FINE_LOCATION: string,
-    ADD_VOICEMAIL: string,
-    BODY_SENSORS: string,
-    CALL_PHONE: string,
-    CAMERA: string,
-    GET_ACCOUNTS: string,
-    PROCESS_OUTGOING_CALLS: string,
-    READ_CALENDAR: string,
-    READ_CALL_LOG: string,
-    READ_CONTACTS: string,
-    READ_EXTERNAL_STORAGE: string,
-    READ_PHONE_STATE: string,
-    READ_SMS: string,
-    RECEIVE_MMS: string,
-    RECEIVE_SMS: string,
-    RECEIVE_WAP_PUSH: string,
-    RECORD_AUDIO: string,
-    SEND_SMS: string,
-    USE_SIP: string,
-    WRITE_CALENDAR: string,
-    WRITE_CALL_LOG: string,
-    WRITE_CONTACTS: string,
-    WRITE_EXTERNAL_STORAGE: string,
+      ACCESS_COARSE_LOCATION: string,
+        ACCESS_FINE_LOCATION: string,
+          ADD_VOICEMAIL: string,
+            BODY_SENSORS: string,
+              CALL_PHONE: string,
+                CAMERA: string,
+                  GET_ACCOUNTS: string,
+                    PROCESS_OUTGOING_CALLS: string,
+                      READ_CALENDAR: string,
+                        READ_CALL_LOG: string,
+                          READ_CONTACTS: string,
+                            READ_EXTERNAL_STORAGE: string,
+                              READ_PHONE_STATE: string,
+                                READ_SMS: string,
+                                  RECEIVE_MMS: string,
+                                    RECEIVE_SMS: string,
+                                      RECEIVE_WAP_PUSH: string,
+                                        RECORD_AUDIO: string,
+                                          SEND_SMS: string,
+                                            USE_SIP: string,
+                                              WRITE_CALENDAR: string,
+                                                WRITE_CALL_LOG: string,
+                                                  WRITE_CONTACTS: string,
+                                                    WRITE_EXTERNAL_STORAGE: string,
+                                                      BLUETOOTH_CONNECT: string,
+                                                        BLUETOOTH_SCAN: string,
   |} = PERMISSIONS;
-  RESULTS: {|
-    DENIED: $TEMPORARY$string<'denied'>,
-    GRANTED: $TEMPORARY$string<'granted'>,
-    NEVER_ASK_AGAIN: $TEMPORARY$string<'never_ask_again'>,
+RESULTS: {|
+  DENIED: $TEMPORARY$string < 'denied' >,
+    GRANTED: $TEMPORARY$string < 'granted' >,
+      NEVER_ASK_AGAIN: $TEMPORARY$string < 'never_ask_again' >,
   |} = PERMISSION_REQUEST_RESULT;
 
-  /**
-   * DEPRECATED - use check
-   *
-   * Returns a promise resolving to a boolean value as to whether the specified
-   * permissions has been granted
-   *
-   * @deprecated
-   */
-  checkPermission(permission: PermissionType): Promise<boolean> {
-    console.warn(
-      '"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead',
-    );
-    if (Platform.OS !== 'android') {
-      console.warn(
-        '"PermissionsAndroid" module works only for Android platform.',
-      );
-      return Promise.resolve(false);
-    }
+/**
+ * DEPRECATED - use check
+ *
+ * Returns a promise resolving to a boolean value as to whether the specified
+ * permissions has been granted
+ *
+ * @deprecated
+ */
+checkPermission(permission: PermissionType): Promise < boolean > {
+  console.warn(
+    '"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead',
+  );
+  if(Platform.OS !== 'android') {
+  console.warn(
+    '"PermissionsAndroid" module works only for Android platform.',
+  );
+  return Promise.resolve(false);
+}
 
-    invariant(
-      NativePermissionsAndroid,
-      'PermissionsAndroid is not installed correctly.',
-    );
+invariant(
+  NativePermissionsAndroid,
+  'PermissionsAndroid is not installed correctly.',
+);
 
-    return NativePermissionsAndroid.checkPermission(permission);
+return NativePermissionsAndroid.checkPermission(permission);
   }
 
-  /**
-   * Returns a promise resolving to a boolean value as to whether the specified
-   * permissions has been granted
-   *
-   * See https://reactnative.dev/docs/permissionsandroid.html#check
-   */
-  check(permission: PermissionType): Promise<boolean> {
-    if (Platform.OS !== 'android') {
-      console.warn(
-        '"PermissionsAndroid" module works only for Android platform.',
-      );
-      return Promise.resolve(false);
-    }
+/**
+ * Returns a promise resolving to a boolean value as to whether the specified
+ * permissions has been granted
+ *
+ * See https://reactnative.dev/docs/permissionsandroid.html#check
+ */
+check(permission: PermissionType): Promise < boolean > {
+  if(Platform.OS !== 'android') {
+  console.warn(
+    '"PermissionsAndroid" module works only for Android platform.',
+  );
+  return Promise.resolve(false);
+}
 
-    invariant(
-      NativePermissionsAndroid,
-      'PermissionsAndroid is not installed correctly.',
-    );
+invariant(
+  NativePermissionsAndroid,
+  'PermissionsAndroid is not installed correctly.',
+);
 
-    return NativePermissionsAndroid.checkPermission(permission);
+return NativePermissionsAndroid.checkPermission(permission);
   }
 
   /**
@@ -167,21 +171,21 @@ class PermissionsAndroid {
    * @deprecated
    */
   async requestPermission(
-    permission: PermissionType,
-    rationale?: Rationale,
-  ): Promise<boolean> {
-    console.warn(
-      '"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead',
-    );
-    if (Platform.OS !== 'android') {
-      console.warn(
-        '"PermissionsAndroid" module works only for Android platform.',
-      );
-      return Promise.resolve(false);
-    }
+  permission: PermissionType,
+  rationale ?: Rationale,
+): Promise < boolean > {
+  console.warn(
+    '"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead',
+  );
+  if(Platform.OS !== 'android') {
+  console.warn(
+    '"PermissionsAndroid" module works only for Android platform.',
+  );
+  return Promise.resolve(false);
+}
 
-    const response = await this.request(permission, rationale);
-    return response === this.RESULTS.GRANTED;
+const response = await this.request(permission, rationale);
+return response === this.RESULTS.GRANTED;
   }
 
   /**
@@ -191,69 +195,69 @@ class PermissionsAndroid {
    * See https://reactnative.dev/docs/permissionsandroid.html#request
    */
   async request(
-    permission: PermissionType,
-    rationale?: Rationale,
-  ): Promise<PermissionStatus> {
-    if (Platform.OS !== 'android') {
-      console.warn(
-        '"PermissionsAndroid" module works only for Android platform.',
-      );
-      return Promise.resolve(this.RESULTS.DENIED);
-    }
+  permission: PermissionType,
+  rationale ?: Rationale,
+): Promise < PermissionStatus > {
+  if(Platform.OS !== 'android') {
+  console.warn(
+    '"PermissionsAndroid" module works only for Android platform.',
+  );
+  return Promise.resolve(this.RESULTS.DENIED);
+}
 
-    invariant(
-      NativePermissionsAndroid,
-      'PermissionsAndroid is not installed correctly.',
-    );
+invariant(
+  NativePermissionsAndroid,
+  'PermissionsAndroid is not installed correctly.',
+);
 
-    if (rationale) {
-      const shouldShowRationale = await NativePermissionsAndroid.shouldShowRequestPermissionRationale(
-        permission,
-      );
+if (rationale) {
+  const shouldShowRationale = await NativePermissionsAndroid.shouldShowRequestPermissionRationale(
+    permission,
+  );
 
-      if (shouldShowRationale && !!NativeDialogManagerAndroid) {
-        return new Promise((resolve, reject) => {
-          const options = {
-            ...rationale,
-          };
-          NativeDialogManagerAndroid.showAlert(
-            /* $FlowFixMe(>=0.111.0 site=react_native_fb) This comment
-             * suppresses an error found when Flow v0.111 was deployed. To see
-             * the error, delete this comment and run Flow. */
-            options,
-            () => reject(new Error('Error showing rationale')),
-            () =>
-              resolve(NativePermissionsAndroid.requestPermission(permission)),
-          );
-        });
-      }
-    }
-    return NativePermissionsAndroid.requestPermission(permission);
+  if (shouldShowRationale && !!NativeDialogManagerAndroid) {
+    return new Promise((resolve, reject) => {
+      const options = {
+        ...rationale,
+      };
+      NativeDialogManagerAndroid.showAlert(
+        /* $FlowFixMe(>=0.111.0 site=react_native_fb) This comment
+         * suppresses an error found when Flow v0.111 was deployed. To see
+         * the error, delete this comment and run Flow. */
+        options,
+        () => reject(new Error('Error showing rationale')),
+        () =>
+          resolve(NativePermissionsAndroid.requestPermission(permission)),
+      );
+    });
+  }
+}
+return NativePermissionsAndroid.requestPermission(permission);
   }
 
-  /**
-   * Prompts the user to enable multiple permissions in the same dialog and
-   * returns an object with the permissions as keys and strings as values
-   * indicating whether the user allowed or denied the request
-   *
-   * See https://reactnative.dev/docs/permissionsandroid.html#requestmultiple
-   */
-  requestMultiple(
-    permissions: Array<PermissionType>,
-  ): Promise<{[permission: PermissionType]: PermissionStatus, ...}> {
-    if (Platform.OS !== 'android') {
-      console.warn(
-        '"PermissionsAndroid" module works only for Android platform.',
-      );
-      return Promise.resolve({});
-    }
+/**
+ * Prompts the user to enable multiple permissions in the same dialog and
+ * returns an object with the permissions as keys and strings as values
+ * indicating whether the user allowed or denied the request
+ *
+ * See https://reactnative.dev/docs/permissionsandroid.html#requestmultiple
+ */
+requestMultiple(
+  permissions: Array < PermissionType >,
+): Promise < { [permission: PermissionType]: PermissionStatus, ...} > {
+  if(Platform.OS !== 'android') {
+  console.warn(
+    '"PermissionsAndroid" module works only for Android platform.',
+  );
+  return Promise.resolve({});
+}
 
-    invariant(
-      NativePermissionsAndroid,
-      'PermissionsAndroid is not installed correctly.',
-    );
+invariant(
+  NativePermissionsAndroid,
+  'PermissionsAndroid is not installed correctly.',
+);
 
-    return NativePermissionsAndroid.requestMultiplePermissions(permissions);
+return NativePermissionsAndroid.requestMultiplePermissions(permissions);
   }
 }
 
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..21a13cf
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
\ No newline at end of file
