import React, { Component } from 'react';
import { connect } from 'react-redux';
import {
	View,
	Text,
	ScrollView,
	StyleSheet,
	ActivityIndicator,
	TextInput,
	Alert,
	Platform,
	TouchableOpacity,
	PermissionsAndroid,
	// Bluetooth
	Switch,
	Dimensions,
	DeviceEventEmitter,
	NativeEventEmitter,
	ToastAndroid,
	Image, Picker, PickerIOS
} from 'react-native';
//asda
import { Actions } from 'react-native-router-flux';
import {
	Button,
	WingBlank,
	Flex,
	Card,
	WhiteSpace,
	InputItem,
} from '@ant-design/react-native/lib';
import { updateCylinders, returnGas } from '../actions/CyclinderActions';
import { fetchUsers, getListDriver } from '../actions/AuthActions';
import { exportPlace } from '../actions/ManufactureAction';
import { getLstCylinder } from '../actions/PrintActions';
import { COLOR } from '../constants';
import { destinationList } from '../helper/selector';
import PickerCustom from './../components/PickerCustom';
import Modal from 'react-native-modal';
import moment from 'moment';
import { TextField } from 'react-native-material-textfield';
import MultiSelect from 'react-native-multiple-select';
import saver from '../utils/saver';
import {
	AGENCY,
	EXPORT,
	FACTORY,
	GENERAL,
	IMPORT,
	STATION,
	TURN_BACK,
} from '../types';
import ManufactureReducer from '../reducers/ManufactureReducer';
import {
	BluetoothManager,
	BluetoothEscposPrinter,
	BluetoothTscPrinter,
} from 'react-native-bluetooth-escpos-printer';
import { getUsers_DesList, removeUsers_DesList } from '../helper/auth';

import SignatureCapture from 'react-native-signature-capture';

import { setLanguage, getLanguage } from '../helper/auth';

import * as RNLocalize from 'react-native-localize';
import i18n from 'i18n-js';
import memoize from 'lodash.memoize';
import { windowToggle } from 'rxjs/operators';
import addLocalCyclinder from './../api/addLocalCyclinder';
import { cleanAccents } from './../helper/words';
import { from } from 'rxjs';

const translationGetters = {
	en: () => require('../languages/en.json'),
	vi: () => require('../languages/vi.json'),
};

const chooseLanguageConfig = lgnCode => {
	let fallback = { languageTag: 'vi' };
	if (Object.keys(translationGetters).includes(lgnCode)) {
		fallback = { languageTag: lgnCode };
	}

	const { languageTag } = fallback;

	translate.cache.clear();

	i18n.translations = { [languageTag]: translationGetters[languageTag]() };
	i18n.locale = languageTag;
};

const translate = memoize(
	(key, config) => i18n.t(key, config),
	(key, config) => (config ? key + JSON.stringify(config) : key),
);

// Bluetooth
var { height, width } = Dimensions.get('window');

const base64_uncheckBox =
	'iVBORw0KGgoAAAANSUhEUgAAAfQAAAFmCAIAAAAUGv+VAAAAAXNSR0IArs4c6QAAAANzQklUBQYF\nMwuNgAAABQNJREFUeJzt1MEJACAQwDB1/53PJQShJBP01T0zC4CW8zsAgPfMHSDI3AGCzB0gyNwB\ngswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGC\nzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLM\nHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswd\nIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0g\nyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI\n3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjc\nAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwB\ngswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGC\nzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLM\nHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswd\nIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0g\nyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI\n3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjc\nAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwB\ngswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGC\nzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLM\nHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswd\nIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0g\nyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI\n3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjc\nAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCzB0gyNwB\ngswdIMjcAYLMHSDI3AGCzB0gyNwBgswdIMjcAYLMHSDI3AGCLj+cBcm8Os9WAAAAAElFTkSuQmCC\n';

const base64_sopet =
	'';

const base64_sopet2 =
	"

const styles = StyleSheet.create({
	container: {
		flex: 1,
		margin: 20,
		justifyContent: 'center',
		alignItems: 'center',
	},
	txtError: {
		fontSize: 18,
		color: COLOR.RED,
	},
	to: {
		width: '100%',
	},
	signature: {
		flex: 1,
		borderColor: '#000033',
		borderWidth: 1,
	},
	buttonStyle: {
		flex: 1,
		justifyContent: 'center',
		alignItems: 'center',
		height: 50,
		margin: 10,
	},
	// Bluetooth
	title: {
		//width:width,
		backgroundColor: '#eee',
		color: '#232323',
		paddingLeft: 8,
		paddingVertical: 4,
		textAlign: 'left',
	},
	btnPrint: {
		color: 'blue',
	},
	btnFinish: {
		backgroundColor: "#F6921E",
		height: 50,
		alignItems: "center",
		justifyContent: "center",
		borderRadius: 8,
	},
	btnFinishDisable: {
		backgroundColor: "#edcda8",
		height: 50,
		alignItems: "center",
		justifyContent: "center",
		borderRadius: 8,
	},
	txtFinishDisable: {
		fontSize: 18,
		textAlign: "center",
		color: 'grey',
	},
	txtFinish: {
		fontSize: 18,
		textAlign: "center",
		color: 'white',
	}
});

const PickerItem = Platform.OS === 'ios' ? PickerIOS.Item : Picker.Item;

class Shipper extends Component {
	_listeners = [];
	constructor(props) {
		super(props);
		this.state = {
			driver: '',
			idDriver: '',
			license_plate: '',
			addressCustomer: '',
			nameCustomer: '',
			to: '',
			nameCompany: '',
			submitted: false,
			selectedItems: [],
			selectedItemsFullInfo: [],
			numberArrays: [],
			//exportPlaceCylinder:[],
			total: 0,
			phoneCustomer: '',
			Shipper: '',
			phoneNumber: '',
			numberOfCylinder: 0,
			exportPlace: '',
			errorDriver: false,
			errorCompany: false,
			errorLicensePlate: false,
			openModal: false,
			weight: null,
			errorWeight: false,
			save: false,
			cylindersReturn: [],
			// Bluetooth
			devices: null,
			pairedDs: [],
			foundDs: [],
			bleOpend: false,
			loading: true,
			boundAddress: '',
			name: '',
			//debugMsg: '',
			//list_inforCylinder: this.props.getLstCylinder()
			list_getUsers_DesList: [],
			signature_CheckedBy: '',
			save_Signature_CheckedBy: false,
			save_is_Disable: true

		};

		this.pickerCustomRef = React.createRef();
	}

	// componentWillReceiveProps(nextProps){
	//     if(nextProps.exportPlaceCylinder !== this.props.exportPlaceCylinder){
	//         this.setState({exportPlaceCylinder:nextProps.exportPlaceCylinder})
	//     }
	// }

	// componentWillMount() {
	//     this.props.exportPlace()
	// }

	componentDidMount = async () => {
		let Users_DesList = await getUsers_DesList('users_deslist');

		if (Array.isArray(Users_DesList)) {
			this.setState({ list_getUsers_DesList: Users_DesList });
		}

		const { cyclinderAction, userType, cyclinder } = this.props;
		cyclinderAction === TURN_BACK
			? this.props.getListDriver(this.props.id.toString())
			: null;
		if (
			cyclinderAction === EXPORT &&
			(userType === FACTORY || userType === GENERAL)
		) {
			this.props.getListDriver(this.props.id.toString());
			this.props.getLstCylinder(cylinders);
		} else if (cyclinderAction === IMPORT) {
			this.props.getListDriver(cyclinder?.current?.id)
			this.setState({ to: cyclinder?.current?.id })
		}
		await this.askPermisson();

		let getData = await addLocalCyclinder.getItem();
		this.setState({ cylindersReturn: getData });
		if (cyclinderAction !== IMPORT) {
			this.props.fetchUsers();
		}
		try {
			const languageCode = await getLanguage();
			if (languageCode) {
				RNLocalize.addEventListener(
					'change',
					this.handleChangeLanguage(languageCode),
				);
			}
		} catch (error) {
			console.log(error);
		}

		// Bluetooth
		BluetoothManager.isBluetoothEnabled().then(
			enabled => {
				this.setState({
					bleOpend: Boolean(enabled),
					loading: false,
				});
			},
			err => {
				err;
			},
		);

		if (Platform.OS === 'ios') {
			let bluetoothManagerEmitter = new NativeEventEmitter(BluetoothManager);
			this._listeners.push(
				bluetoothManagerEmitter.addListener(
					BluetoothManager.EVENT_DEVICE_ALREADY_PAIRED,
					rsp => {
						this._deviceAlreadPaired(rsp);
					},
				),
			);
			this._listeners.push(
				bluetoothManagerEmitter.addListener(
					BluetoothManager.EVENT_DEVICE_FOUND,
					rsp => {
						this._deviceFoundEvent(rsp);
					},
				),
			);
			this._listeners.push(
				bluetoothManagerEmitter.addListener(
					BluetoothManager.EVENT_CONNECTION_LOST,
					() => {
						this.setState({
							name: '',
							boundAddress: '',
						});
					},
				),
			);
		} else if (Platform.OS === 'android') {
			this._listeners.push(
				DeviceEventEmitter.addListener(
					BluetoothManager.EVENT_DEVICE_ALREADY_PAIRED,
					rsp => {
						this._deviceAlreadPaired(rsp);
					},
				),
			);
			this._listeners.push(
				DeviceEventEmitter.addListener(
					BluetoothManager.EVENT_DEVICE_FOUND,
					rsp => {
						this._deviceFoundEvent(rsp);
					},
				),
			);
			this._listeners.push(
				DeviceEventEmitter.addListener(
					BluetoothManager.EVENT_CONNECTION_LOST,
					() => {
						this.setState({
							name: '',
							boundAddress: '',
						});
					},
				),
			);
			this._listeners.push(
				DeviceEventEmitter.addListener(
					BluetoothManager.EVENT_BLUETOOTH_NOT_SUPPORT,
					() => {
						ToastAndroid.show(
							'Device Not Support Bluetooth !',
							ToastAndroid.LONG,
						);
					},
				),
			);
		}
		// this.props.getLstCylinder()
	};

	componentWillUnmount = async () => {
		const languageCode = await getLanguage();
		if (languageCode) {
			RNLocalize.addEventListener(
				'change',
				this.handleChangeLanguage(languageCode),
			);
		}
	};

	_deviceAlreadPaired(rsp) {
		var ds = null;
		if (typeof rsp.devices == 'object') {
			ds = rsp.devices;
		} else {
			try {
				ds = JSON.parse(rsp.devices);
			} catch (e) { }
		}
		if (ds && ds.length) {
			let pared = this.state.pairedDs;
			ds.forEach((item) => {
				const isExist = pared.some((item_1) => item.address == item_1.address)
				if (!isExist) {
					pared.push(item)
				}
			})
			this.setState({
				pairedDs: pared,
			});
		}
	}

	_deviceFoundEvent(rsp) {
		//alert(JSON.stringify(rsp))
		var r = null;
		try {
			if (typeof rsp.device == 'object') {
				r = rsp.device;
			} else {
				r = JSON.parse(rsp.device);
			}
		} catch (e) {
			//alert(e.message);
			//ignore
		}
		//alert('f')
		if (r) {
			let found = this.state.foundDs || [];
			if (found.findIndex) {
				let duplicated = found.findIndex(function (x) {
					return x.address == r.address;
				});
				//CHECK DEPLICATED HERE...
				if (duplicated == -1) {
					found.push(r);
					this.setState({
						foundDs: found,
					});
				}
			}
		}
	}

	handleChangeLanguage = lgnCode => {
		//setLanguage(lgnCode);
		chooseLanguageConfig(lgnCode);
	};

	handleChange = (name, val) => {
		this.setState({
			...this.state,
			[name]: val,
		});
	};
	// handleChange = (key, value) => {
	//     this.setState({[key]: value})
	// }

	saveSign(ref) {
		this.refs[ref].saveImage();
	}

	resetSign(ref) {
		this.refs[ref].resetImage();
	}

	_onSaveEvent_CheckedBy = result => {
		//result.encoded - for the base64 encoded png
		//result.pathName - for the file path name
		this.setState({
			signature_CheckedBy: result.encoded,
			errorSignature: false
		});
	};
	_onDragEvent_CheckedBy = () => {
		this.setState({ save_is_Disable: false });
		// This callback will be called when the user enters signature
	}

	askPermisson = async () => {
		console.log('request Permission');
		try {
			const granted = await PermissionsAndroid.request(
				PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,

				{
					title: "Storage Permission",
					message: "App needs access to memory to download the file "
				}
			);

			if (granted === PermissionsAndroid.RESULTS.GRANTED) {
				const granted1 = await PermissionsAndroid.request(
					PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
					{
						title: "Storage Permission",
						message: "App needs access to memory to download the file "
					}
				);
				if (granted1 !== PermissionsAndroid.RESULTS.GRANTED) {
					return false;
				}
				return true;
			} else {
				return false;
			}
		} catch (err) {
			console.warn(err);
			return false;
		}
	}

	handleSubmit = async (e) => {
		// e.preventDefault()
		// this.setState({submitted: true})

		const { cylinders, fromUser, cyclinderAction, userType, nameUser } = this.props;
		const {
			driver,
			idDriver,
			license_plate,
			signature,
			to,
			nameCustomer,
			addressCustomer,
			phoneCustomer,
			phoneNumber,
			shipper,
			numberOfCylinder,
			cylindersReturn,
			signature_CheckedBy,
			save_Signature_CheckedBy,
		} = this.state;
		let total = 0;
		await this.state.numberArrays.map(item => {
			total = total + Number(item);
		});
		if (userType === AGENCY && cyclinderAction === EXPORT && !nameCustomer) {
			Alert.alert(translate('notification'), translate('ENTER_FULL_CUSTOMER_INFO'));
			return;
		}
		if (!nameCustomer && (!save_Signature_CheckedBy || signature_CheckedBy === base64_uncheckBox)) {
			Alert.alert(translate('notification'), translate('SIGN_REQ'));
			return;
		}
		// Cuong them vao

		// if (userType === AGENCY) {
		//     if (!nameCustomer || !addressCustomer) {
		//         alert("Bạn nhập thiếu thông tin");
		//     }
		// }

		// End Cuong them vao
		// if(!signature){
		//     Alert.alert(translate('notification'), translate('YOU_ENTER_INFORMATION_IS_MISSING'))

		// }

		this.setState({ total, submitted: true });

		// Kiem tra so luong binh ga xuat di
		// if (
		//     typeof this.state.numberArrays !== "undefined" &&
		//     this.state.numberArrays !== null &&
		//     this.state.numberArrays.length > 0
		// ) {
		//     for (let i = 0; i < this.state.numberArrays.length; i++) {
		//         if (this.state.numberArrays[i] <= 0) {
		//             Alert.alert(
		//                 translate('QUANTITY_CANNOT_BE_LESS_THAN_0'),
		//                 translate('PLEASE_TRY_AGAIN'),
		//                 [{text: translate('RETRY')}],
		//                 {cancelable: false}
		//             )
		//             return
		//         }
		//     }
		// }
		// if (
		//     typeof this.state.numberArrays !== "undefined" &&
		//     this.state.numberArrays !== null &&
		//     this.state.numberArrays.length > 0
		// ) {
		//     if (this.state.total !== cylinders.length) {
		//         // console.log('số luong lon hon')
		//         Alert.alert(
		//             translate('THE_QUANTITY_IS_INCORRECT'),
		//             translate('PLEASE_TRY_AGAIN'),
		//             [{ text: translate('RETRY') }],
		//             { cancelable: false }
		//         )

		//         return

		//     }
		// } else {
		//     if (this.state.total > cylinders.length) {
		//         //console.log('số luong lon hon')
		//         Alert.alert(
		//             translate('THE_QUANTITY_IS_INCORRECT'),
		//             translate('PLEASE_TRY_AGAIN'),
		//             [{ text: translate('RETRY') }],
		//             {cancelable: false}
		//         )
		//         return
		//     }
		// }

		if (driver && license_plate) {
			if (cyclinderAction === IMPORT) {
				const cylinderImex = cylinders.map((cylinder) => {
					return [
						{
							id: cylinder,
							status: 'FULL',
							condition: 'NEW'
						}
					]
				})
				const idImex = Date.now()
				const payload = {
					driver,
					idDriver,
					license_plate,
					signature,
					cylinders,
					from: to,
					to: fromUser,
					type: cyclinderAction,

					signature_CheckedBy,
					save_Signature_CheckedBy,
					cylinderImex,
					idImex,
					typeImex: 'IN',
					flow: 'IMPORT'
				};

				this.props.updateCylinders(payload);
			}
			if (cyclinderAction === EXPORT) {
				// TODO:
				if (userType === GENERAL) {
					const cylinderImex = cylinders.map((cylinder) => {
						return [
							{
								id: cylinder,
								status: 'FULL',
								condition: 'NEW'
							}
						]
					})
					const idImex = Date.now()
					const payload = {
						driver,
						idDriver,
						license_plate,
						signature,
						cylinders,
						from: fromUser,
						numberArray: this.state.numberArrays,
						toArray: this.state.selectedItems,
						to: null,
						type: cyclinderAction,
						signature_CheckedBy,
						save_Signature_CheckedBy,
						typeImex: 'OUT',
						cylinderImex,
						idImex
					};
					this.props.updateCylinders(payload);
				} else if (userType === FACTORY) {
					const payload = {
						driver,
						idDriver,
						license_plate,
						signature,
						cylinders,
						from: fromUser,
						numberArray: this.state.numberArrays,
						toArray: this.state.selectedItems,
						to: null,
						type: cyclinderAction,
						signature_CheckedBy,
						save_Signature_CheckedBy,

					};
					if (payload.toArray.length === 0) {
						Alert.alert(
							translate('PLEASE_SELECT_A_DESTINATION'),
							translate('PLEASE_TRY_AGAIN'),
							[{ text: translate('RETRY') }],
							{ cancelable: false },
						);
					} else {
						this.props.updateCylinders(payload);
					}
				} else {
					if (!to) {
						if (userType === AGENCY) {
							if (nameCustomer && addressCustomer) {
								const cylinderImex = cylinders.map((cylinder) => {
									return [
										{
											id: cylinder,
											status: 'FULL',
											condition: 'NEW'
										}
									]
								})
								const idImex = Date.now()
								const payload = {
									driver,
									idDriver,
									license_plate,
									signature,
									cylinders,
									from: fromUser,
									to: null,
									saler: fromUser,
									nameCustomer,
									addressCustomer,
									phoneCustomer,
									phoneNumber,
									shipper,
									type: 'SALE',
									signature_CheckedBy,
									save_Signature_CheckedBy,
									typeImex: 'OUT',
									flow: 'SALE',
									idImex,
									cylinderImex
								};

								this.props.updateCylinders(payload);
							} else {
								Alert.alert(
									'Oops!',
									translate('YOU_ENTER_INFORMATION_IS_MISSING'),
								);
							}
						} else {
							const payload = {
								driver,
								idDriver,
								license_plate,
								signature,
								cylinders,
								from: fromUser,
								to: null,
								type: cyclinderAction,
								signature_CheckedBy,
								save_Signature_CheckedBy,
							};

							this.props.updateCylinders(payload);
						}
					} else {
						//console.log('loi o day')
						const payload = {
							driver,
							idDriver,
							license_plate,
							signature,
							cylinders,
							from: fromUser,
							to,
							type: cyclinderAction,
							signature_CheckedBy,
							save_Signature_CheckedBy,
						};
						this.props.updateCylinders(payload);
					}
				}
			}
			if (cyclinderAction === TURN_BACK) {
				const payload = {
					driver,
					idDriver,
					license_plate,
					signature,
					cylinders,
					from: null,
					to: fromUser,
					type: cyclinderAction,
					numberOfCylinder: numberOfCylinder,
					cylindersReturn: cylindersReturn,
					signature_CheckedBy,
					save_Signature_CheckedBy,
				};

				this.props.updateCylinders(payload);

				// console.log("c_return", this.state.cylindersReturn)
				// const payload_rtnGas = {
				//     //idManufacture: this.props.id,
				//     cylindersReturn: cylindersReturn,
				//     //createBy: this.props.id
				// }
				// console.log("payload_rtnGas", payload_rtnGas)

				// // returnGas
				// this.props.returnGas(payload_rtnGas)
			}
			if (cyclinderAction === 'EXPORT_PARENT_CHILD') {
				const payload = {
					driver,
					idDriver,
					license_plate,
					signature,
					cylinders,
					from: fromUser,
					to,
					type: EXPORT,
					exportPlace,
					check,
					signature_CheckedBy,
					save_Signature_CheckedBy,
				};

				//console.log("payloadTesst",payload)
				this.props.updateCylinders(payload);
			}
		} else {
			if (userType === AGENCY) {
				// let driverUnd = "Không xác định";
				// let license_plateUnd = "Không xác định";
				const cylinderImex = cylinders.map((cylinder) => {
					return [
						{
							id: cylinder,
							status: 'FULL',
							condition: 'NEW'
						}
					]
				})
				const idImex = Date.now()
				const payload = {
					driver: shipper ? shipper : 'Không xác định',
					idDriver: this.props.id,
					license_plate: license_plate ? license_plate : 'Không xác định',
					signature,
					cylinders,
					from: fromUser,
					to: null,
					nameCustomer: nameCustomer ? nameCustomer : 'Không xác định',
					addressCustomer,
					phoneCustomer: phoneCustomer ? phoneCustomer : 'Không xác định',
					phoneNumber,
					shipper,
					type: 'SALE',
					signature_CheckedBy,
					save_Signature_CheckedBy,
					typeImex: 'OUT',
					flow: 'SALE',
					idImex,
					cylinderImex,
					saler: fromUser,
					salerName: nameUser
				};
				this.props.updateCylinders(payload);
			}
		}
	};

	renderError = error => {
		console.log(error);
		return (
			<WingBlank>
				{/* <WhiteSpace /> */}
				<Text style={styles.txtError}>{error}</Text>
			</WingBlank>
		);
	};

	getItemFromDestinationList(list_id) {
		let selectedItemsFullInfo = [];
		for (let j = 0; j < list_id.length; j++) {
			const id = list_id[j];
			for (let i = 0; i < this.props.destinationList.length; i++) {
				if (this.props.destinationList[i].id === id) {
					selectedItemsFullInfo.push(this.props.destinationList[i]);
				}
			}
		}
		this.setState({ selectedItemsFullInfo });
	}

	onSelectedItemsChange = selectedItems => {
		//const { numberArray } = this.state
		let numberArrays = [];
		for (i = 0; i < selectedItems.length; i++) {
			numberArrays[i] = '0';
		}

		this.getItemFromDestinationList(selectedItems);
		this.setState({ numberArrays });
		this.setState({ selectedItems });
	};

	// TODO: remove after authorization
	getDestination = () => {
		const {
			cyclinderAction,
			generalList,
			factoryList,
			stationList,
			agencyList,
			userType,
		} = this.props;
		if (cyclinderAction === IMPORT) {
			if (userType === FACTORY) {
				return [{ id: null, name: 'Người dân' }];
			}
			if (userType === GENERAL || userType === STATION) {
				return factoryList;
			}
			if (userType === AGENCY) {
				return generalList;
			}
		}
		if (cyclinderAction === EXPORT) {
			if (userType === FACTORY) {
				const outputList = [...generalList, ...stationList, ...agencyList];

				return outputList;
			}
			if (userType === GENERAL) {
				return agencyList;
			}
			if (userType === STATION) {
				return factoryList;
			}
			if (userType === AGENCY) {
				return [{ id: null, name: 'Người dân' }];
			}
		}
		if (cyclinderAction === TURN_BACK) {
			if (userType === FACTORY) {
				return [{ id: null, name: 'Người dân' }];
			}
		}
	};

	renderRow(item, index) {
		return (
			<View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row' }}>
				<View style={{ flex: 1, alignSelf: 'stretch' }}>
					{item.name ? <Text>{item.name}</Text> : null}
				</View>
				<View style={{ flex: 1, alignSelf: 'stretch' }}>
					<InputItem
						//defaultValue='0'
						onChange={value => {
							let numberArrays = this.state.numberArrays;
							numberArrays[index] = value;

							this.setState({
								numberArrays,
							});
						}}
						type={'number'}
						placeholder={translate('ENTER_THE_AMOUNT')}
					/>
					{this.state.submitted &&
						!this.state.numberArrays[index] &&
						this.renderError(translate('AMOUNT_IS_REQUIRED'))}
				</View>
			</View>
		);
	}

	checkSubmit() {
		let check = false;
		if (!this.state.idDriver) {
			this.setState({ errorDriver: translate('DRIVER_NAME_IS_REQUIRED') });
		}
		// else if(!this.state.to) {
		//     this.setState({errorCompany : translate('COMPANY_IS_REQUIRED')})

		//}
		else if (!this.state.license_plate) {
			this.setState({
				errorLicensePlate: translate('LICENSE_PLATE_IS_REQUIRED'),
			});
		} else if (!this.state.signature) {
			this.setState({
				errorSignature: translate('SIGNATURE_IS_REQUIRED'),
			});
		} else {
			check = true;
		}

		// if (this.props.cyclinderAction === TURN_BACK) {
		//     check = true;
		// }

		return check;
	}

	renderNotCylinder() {
		const { submitted, numberOfCylinder } = this.state;
		return (
			<View>
				<InputItem
					//onChangeText={v => this.handleChange('driver', v)}
					type="number"
					onChange={numberOfCylinder => {
						this.setState({
							numberOfCylinder,
						});
					}}
					placeholder={translate('TOTAL_IMPORT')}
				/>
			</View>
		);
	}

	// get_lsDriver() {
	//     this.setState({
	//         textAbc : this.props.getListDriver(this.props.id.toString())
	//     })
	// }

	// handleFindCylinder = () => {
	//     const payload = {
	//         findCylinders: ["5de9dc3fb4dabc37ae9d5ca3", "5de9dc3fb4dabc37ae9d5ca4"]
	//     }
	//     alert('clicked')
	//     this.props.getLstCylinder(payload)
	// }

	// change_numberArray = (index) => {
	//     let default_numberArray = []
	//     for (i=0; i<index; i++) {
	//         default_numberArray[index] = '0'
	//     }
	//     this.setState({default_numberArray})
	// }

	render() {
		const {
			driver,
			license_plate,
			submitted,
			licenseCustomer,
			nameCustomer,
			addressCustomer,
			selectedItemsFullInfo,
			list_getUsers_DesList,
			signature_CheckedBy,
			save_Signature_CheckedBy,

		} = this.state;
		const {
			isAuthLoading,
			isCylindersLoading,
			error,
			cyclinderAction,
			userType,
			cyclinder,
			listNameDriver,
			id,
		} = this.props;
		const cyclinderLast = saver.getArrCyclinder();
		let destinationList = this.props.destinationList;

		// console.log('props_list_inforCylinder', list_inforCylinder)
		// if (list_inforCylinder) {
		//     let data_cylindersInfor = list_inforCylinder.data_cylindersInfor
		//     console.log('props_data_cylindersInfor', data_cylindersInfor)
		// }

		if (destinationList) {
			destinationList.map(user => {
				if (user.userRole !== 'SuperAdmin') {
					const index = destinationList.indexOf(user);
					if (index > -1) {
						destinationList.splice(index, 1);
					}
				}
			});
		}

		if (isAuthLoading || isCylindersLoading) {
			return <ActivityIndicator size="large" color={COLOR.BLUE} />;
		}
		//const itemFrom = this.props.cyclinder.histories[lastItem]
		return (
			<ScrollView>
				<Flex style={styles.container}>
					<Flex.Item>
						<Card>
							<Card.Header title={translate('SHIPPING_INFORMATION')} />
							<Card.Body>
								{/* ----------------- */}

								{cyclinderAction === 'EXPORT' && userType === 'Agency' ? (
									<WingBlank>
										<View>
											<InputItem
												// clear
												onChange={nameCustomer => {
													this.setState({
														nameCustomer,
													});
												}}
												placeholder={translate('CUSTOMER_NAME')}
											/>
											{submitted &&
												(!nameCustomer || nameCustomer === 'Không xác định') &&
												this.renderError(
													translate('CUSTOMER_NAME_IS_REQUIRED'),
												)}
											<InputItem
												onChange={addressCustomer => {
													this.setState({
														addressCustomer,
													});
												}}
												placeholder={translate('CUSTOMER_ADDRESS')}
											/>
											{submitted &&
												(!addressCustomer ||
													addressCustomer === 'Không xác định') &&
												this.renderError(
													translate('CUSTOMER_ADDRESS_IS_REQUIRED'),
												)}
											<InputItem
												onChange={phoneCustomer => {
													this.setState({
														phoneCustomer,
													});

												}}
												type={'number'}
												placeholder={translate('PHONE')}
											/>
											<InputItem
												onChange={shipper => {
													this.setState({
														shipper,
													});

												}}
												placeholder={translate('NAME_SHIPPER')}
											/>
											<InputItem
												onChange={phoneNumber => {
													this.setState({
														phoneNumber,
													});

												}}
												type={'number'}
												placeholder={translate('PHONE')}
											/>
											{/* {submitted && !driver &&
                                        this.renderError("số điện thoại bắt buộc")} */}
										</View>
									</WingBlank>
								) : (
									<View>
										<WingBlank>
											{/* <InputItem
                                    //onChangeText={v => this.handleChange('driver', v)}
                                    onChange={driver => {
                                        this.setState({
                                            driver
                                        })
                                    }}
                                    placeholder={translate('DRIVERS_NAME')}
                                /> */}

											<PickerCustom
												placeholder={translate('select_driver')}
												value={this.state.idDriver}
												error={this.state.errorDriver}
												ref={this.pickerCustomRef}
												listItem={listNameDriver?.data.map(driver => ({
													value: driver.id,
													label: driver.name,
												}))}
												setValue={value => {
													this.setState({
														idDriver: value.value,
														errorDriver: false,
													});
													this.setState({ driver: value.label });
												}}
											/>

											{/* <Picker
                                        selectedValue={this.state.driver}

                                        // style={styles.to}
                                        onValueChange={(itemValue, itemIndex) => {
                                            this.setState({driver: listNameDriver.data[itemIndex].name})
                                            this.setState({idDriver: itemValue})
                                        }}
                                    >
                                        <Picker.Item label={translate('SELECT_DRIVER')} value="null" />
                                        {
                                            listNameDriver ? (
                                                // console.log("dcg", listNameDriver.data)
                                                listNameDriver.data.map( driver => {
                                                    return (
                                                        <Picker.Item
                                                            label={driver.name}
                                                            value={driver.id}
                                                            //key={nameDriver}
                                                        />
                                                    )
                                                })
                                            ) : (
                                                // <Picker.Item label={translate('CHOOSE_COMPANY')} value="null" />
                                            )
                                        }

                                    </Picker> */}

											<TextField
												onChangeText={license_plate => {
													this.setState({
														license_plate,
														errorLicensePlate: false,
													});
												}}
												error={this.state.errorLicensePlate ? 'Error' : ''}
												label={translate('LICENSE_PLATE')}
											/>
											{submitted &&
												(!license_plate ||
													licenseCustomer === 'Không xác định') &&
												this.renderError(
													translate('LICENSE_PLATE_IS_REQUIRED'),
												)}
											{/*
                                // {submitted &&
                                // !license_plate &&
                                // userType !== "Agency" &&
                                // this.renderError(translate('LICENSE_PLATE_IS_REQUIRED'))} */}
											{console.log(userType !== 'Agency')}

											{cyclinderAction === TURN_BACK
												? this.renderNotCylinder()
												: null}
											{cyclinderAction === 'EXPORT' && userType === 'Agency' ? (
												<View>
													<InputItem
														// clear
														onChange={nameCustomer => {
															this.setState({
																nameCustomer,
															});
														}}
														placeholder={translate('CUSTOMER_NAME')}
													/>
													{submitted &&
														(!nameCustomer ||
															nameCustomer === 'Không xác định') &&
														this.renderError(
															translate('CUSTOMER_NAME_IS_REQUIRED'),
														)}
													<InputItem
														onChange={addressCustomer => {
															this.setState({
																addressCustomer,
															});
														}}
														placeholder={translate('CUSTOMER_ADDRESS')}
													/>
													{submitted &&
														(!addressCustomer ||
															addressCustomer === 'Không xác định') &&
														this.renderError(
															translate('CUSTOMER_ADDRESS_IS_REQUIRED'),
														)}
													<InputItem
														onChange={phoneCustomer => {
															this.setState({
																phoneCustomer,
															});
														}}
														type={'number'}
														placeholder={translate('PHONE')}
													/>
													{/* {submitted && !driver &&
                                        this.renderError("số điện thoại bắt buộc")} */}
												</View>
											) : null}
											{/*{userType === FACTORY && cyclinderAction === EXPORT && (*/}
											{/*    <WingBlank>*/}
											{/*        <Picker*/}
											{/*            selectedValue={this.state.exportPlace}*/}
											{/*            style={styles.to}*/}
											{/*            onValueChange={(itemValue, itemIndex) => {*/}
											{/*                this.setState({exportPlace: itemValue})*/}
											{/*            }}>*/}
											{/*            <Picker.Item label="Vui lòng chọn " value="null"/>*/}
											{/*            {cyclinderAction !== IMPORT && !!exportPlaceCylinder ? (*/}
											{/*                exportPlaceCylinder.map(v => {*/}
											{/*                    return (*/}
											{/*                        <Picker.Item*/}
											{/*                            label={v.name}*/}
											{/*                            value={v.id}*/}
											{/*                            key={v.name}*/}
											{/*                        />*/}
											{/*                    )*/}
											{/*                })*/}
											{/*            ) : null}*/}
											{/*        </Picker>*/}
											{/*    </WingBlank>*/}
											{/*)}*/}
										</WingBlank>

										<WingBlank>
											{cyclinderAction === IMPORT ? null : destinationList.length >= 1 ? (
												cyclinderAction === EXPORT &&
													(userType === FACTORY || userType === GENERAL) ? (
													<View>
														<WhiteSpace />
														<MultiSelect
															hideTags={false}
															items={destinationList}
															uniqueKey="id"
															selectText={translate('SELECT')}
															ref={component => {
																this.multiSelect = component;
															}}
															onSelectedItemsChange={this.onSelectedItemsChange}
															selectedItems={this.state.selectedItems}
															searchInputPlaceholderText={translate('SELECT')}
															onChangeInput={text => console.log(text)}
															altFontFamily={
																Platform.OS === 'ios' ? '' : 'ProximaNova-Light'
															}
															tagRemoveIconColor="#CCC"
															tagBorderColor="#CCC"
															tagTextColor="#CCC"
															selectedItemTextColor="#CCC"
															selectedItemIconColor="#CCC"
															itemTextColor="#000"
															displayKey="name"
															searchInputStyle={{ color: '#CCC' }}
															submitButtonColor="#CCC"
															submitButtonText={translate('SELECTED')}
														/>
														<View
															style={{
																flex: 1,
																alignItems: 'center',
																justifyContent: 'center',
															}}
														>
															{this.state.selectedItemsFullInfo.map(
																(item, index) => {
																	// this.change_numberArray(index)
																	// This will render a row for each data element.
																	return this.renderRow(item, index);
																},
															)}
														</View>
													</View>
												) : cyclinderAction === TURN_BACK &&
													userType === FACTORY &&
													saver.getTypeCyclinder() ===
													'' ? null : /*<View><Text >{this.state.textAbc}</Text></View>*/ cyclinderAction ===
														EXPORT && userType === AGENCY ? null : (
													<PickerCustom
														placeholder={translate('CHOOSE_COMPANY')}
														value={this.state.to}
														error={this.state.errorCompany}
														ref={this.pickerCustomRef}
														listItem={destinationList.map(v => ({
															value: v.id,
															label: v.name,
														}))}
														setValue={value => {
															this.setState({
																to: value.value,
																errorCompany: false,
															});
															this.setState({ nameCompany: value.label });
															this.props.getListDriver(value.value);
														}}
													/>
													// <Picker
													//     selectedValue={this.state.to}
													//     style={styles.to}
													//     onValueChange={(itemValue, itemIndex) => {
													//         console.log("Chon cmb",itemValue)
													//         this.setState({to: itemValue})
													//         this.props.getListDriver(itemValue)
													//     }}
													// >
													//     <Picker.Item label={translate('CHOOSE_COMPANY')} value="null"/>
													//     {cyclinderAction !== IMPORT ? (
													//         destinationList.map(v => {
													//             return (
													//                 <Picker.Item
													//                     label={v.name}
													//                     value={v.id}
													//                     key={v.name}
													//                 />
													//             )
													//         })
													//     ) : (
													//         <Picker.Item
													//             label={cyclinderLast.current.name}
													//             value={cyclinderLast.current.id}
													//             key={cyclinderLast.current.name}
													//         />
													//     )}
													// </Picker>
												)
											) : list_getUsers_DesList.length > 0 ? (
												cyclinderAction === EXPORT &&
													(userType === FACTORY || userType === GENERAL) ? (
													<View>
														<WhiteSpace />
														<MultiSelect
															hideTags={false}
															items={list_getUsers_DesList}
															uniqueKey="id"
															selectText={translate('SELECT')}
															ref={component => {
																this.multiSelect = component;
															}}
															onSelectedItemsChange={this.onSelectedItemsChange}
															selectedItems={this.state.selectedItems}
															searchInputPlaceholderText={translate('SELECT')}
															onChangeInput={text => console.log(text)}
															altFontFamily={
																Platform.OS === 'ios' ? '' : 'ProximaNova-Light'
															}
															tagRemoveIconColor="#CCC"
															tagBorderColor="#CCC"
															tagTextColor="#CCC"
															selectedItemTextColor="#CCC"
															selectedItemIconColor="#CCC"
															itemTextColor="#000"
															displayKey="name"
															searchInputStyle={{ color: '#CCC' }}
															submitButtonColor="#CCC"
															submitButtonText={translate('SELECTED')}
														/>
														<View
															style={{
																flex: 1,
																alignItems: 'center',
																justifyContent: 'center',
															}}
														>
															{this.state.selectedItemsFullInfo.map(
																(item, index) => {
																	// this.change_numberArray(index)
																	// This will render a row for each data element.
																	return this.renderRow(item, index);
																},
															)}
														</View>
													</View>
												) : cyclinderAction === TURN_BACK &&
													userType === FACTORY &&
													saver.getTypeCyclinder() ===
													'' ? null : /*<View><Text >{this.state.textAbc}</Text></View>*/ cyclinderAction ===
														EXPORT && userType === AGENCY ? null : (
													<PickerCustom
														placeholder={translate('CHOOSE_COMPANY')}
														value={this.state.to}
														error={this.state.errorCompany}
														ref={this.pickerCustomRef}
														listItem={list_getUsers_DesList.map(v => ({
															value: v.id,
															label: v.name,
														}))}
														setValue={value => {
															this.setState({
																to: value.value,
																errorCompany: false,
															});
															this.setState({ nameCompany: value.label });
															this.props.getListDriver(value.value);
														}}
													/>
												)
											) : (
												<Text />
											)}
										</WingBlank>

										{/* <WingBlank style={{ flex: 1}}> */}

										<View style={{ flexDirection: 'column', height: 380 }}>
											<Text style={{ textAlign: 'center' }}>
												{translate('SIGNATURE')}
											</Text>
											<Text style={{ textAlign: 'center', color: 'red' }}>
												{this.state.errorSignature
													? this.state.errorSignature
													: null}
											</Text>

											<View
												style={{
													borderWidth: this.state.errorSignature ? 1 : 0,
													borderColor: 'red',
													flex: 1,
													marginVertical: 10,
													position: 'relative',
												}}
											>
												<SignatureCapture
													style={[{ flex: 1 }, styles.signature]}
													ref="signCheckedBY"
													onSaveEvent={this._onSaveEvent_CheckedBy}
													onDragEvent={this._onDragEvent_CheckedBy.bind(this)}
													saveImageFileInExtStorage={true}
													showNativeButtons={false}
													showTitleLabel={false}
													viewMode={'portrait'}
												/>

												{/* {this.state.save ? <View style={{ width: '100%', height: 250, opacity: 0.0, position: 'absolute', backgroundColor: '#FFFFFF50', top: 0 }} /> : null} */}

												{save_Signature_CheckedBy ? (
													<View
														style={{
															width: '100%',
															height: 250,
															position: 'absolute',
															top: 0,
														}}
													>
														<Image
															style={{
																width: '100%',
																height: 250,
																position: 'absolute',
																top: 0,
															}}
															source={{
																// uri: 'https://reactnative.dev/img/tiny_logo.png',
																uri: `data:image/png;base64,${this.state.signature}`,
															}}
														/>
													</View>
												) : null}
											</View>

											<View style={{ flexDirection: 'row', marginHorizontal: 6 }}>
												<TouchableOpacity
													disabled={this.state.save_is_Disable}
													style={[styles.buttonStyle, { backgroundColor: '#eeeeee' }]}
													onPress={() => {
														this.setState({ save_Signature_CheckedBy: true });
														this.saveSign('signCheckedBY');
													}}
												>
													<Text>{translate('SAVE')}</Text>
												</TouchableOpacity>

												<TouchableOpacity
													style={[styles.buttonStyle, { backgroundColor: '#eeeeee' }]}
													onPress={() => {
														this.setState({ save_Signature_CheckedBy: false, save_is_Disable: true });
														this.resetSign('signCheckedBY');
													}}
												>
													<Text>{translate('RESET')}</Text>
												</TouchableOpacity>
											</View>
										</View>

										{/* </WingBlank> */}
									</View>
								)}

								<WingBlank>
									<WhiteSpace size="lg" />
									{isCylindersLoading ? (
										<ActivityIndicator size="large" color={COLOR.BLUE} />
									) : (
										<TouchableOpacity
											// disabled={((userType === FACTORY || userType === GENERAL) && cyclinderAction === EXPORT && destinationList.length === 0) ? true : false}
											disabled={
												(userType === FACTORY || userType === GENERAL) &&
													cyclinderAction === EXPORT &&
													this.state.selectedItems.length === 0
													? true
													: false
											}
											onPress={() => {
												//.log(((this.state.nameCustomer.length > 0 && this.state.addressCustomer.length > 0 && this.state.phoneCustomer.length > 0)));
												// if(this.checkSubmit()) {
												this.handleSubmit();
												// }
												// alert("abc")
											}}
											style={((this.state.selectedItems.length > 0 && this.state.save_Signature_CheckedBy)
												|| (this.state.nameCustomer.length > 0 && this.state.addressCustomer.length > 0 && this.state.phoneCustomer.length > 0))
												|| ((userType === FACTORY || userType === GENERAL || userType === AGENCY) && cyclinderAction === IMPORT) && this.state.save_Signature_CheckedBy ?
												styles.btnFinish : styles.btnFinishDisable}
										>
											<Text style={styles.txtFinish}>{translate('FINISH')}</Text>
										</TouchableOpacity>
									)}
								</WingBlank>

								<WingBlank>
									<WhiteSpace size="lg" />
									{/* // */}
									{/* <Text>{this.state.debugMsg}</Text> */}
									<Text textAlign="center">
										{translate('TURN_ON_BLUETOOTH')}
									</Text>
									<Text style={styles.title}>
										{translate('BLUETOOTH_STATUS')}: {this.state.bleOpend ? translate('ON') : translate('OFF')}
									</Text>

									<View style={{ paddingBottom: 5 }}>
										<Switch
											value={this.state.bleOpend}
											onValueChange={v => {
												this.setState({
													loading: true,
												});
												if (!v) {
													BluetoothManager.disableBluetooth().then(
														() => {
															this.setState({
																bleOpend: false,
																loading: false,
																foundDs: [],
																pairedDs: [],
															});
														},
														err => {
															Alert.alert('Oops!', err);
														},
													);
												} else {
													BluetoothManager.enableBluetooth().then(
														r => {
															var paired = [];
															if (r && r.length > 0) {
																for (var i = 0; i < r.length; i++) {
																	try {
																		paired.push(JSON.parse(r[i]));
																	} catch (e) {
																		//ignore
																		console.log(e);
																	}
																}
															}
															this.setState({
																bleOpend: true,
																loading: false,
																pairedDs: paired,
															});
														},
														err => {
															this.setState({
																loading: false,
															});
															Alert.alert('Oops!', err);
														},
													);
												}
											}}
										/>
										<Button
											disabled={this.state.loading || !this.state.bleOpend}
											onPress={() => {
												this._scan();
											}}
										>
											Scan
										</Button>
									</View>
									<Text style={styles.title}>
										{translate('CONNECT_DEVICE')}
										<Text style={{ color: 'blue' }}>
											{!this.state.name ? translate('NO_DEVICE') : this.state.name}
										</Text>
									</Text>
									<Text style={styles.title}>
										{translate('FIND_DEVICE_TO_CONNECT')}
									</Text>
									{this.state.loading ? (
										<ActivityIndicator animating={true} />
									) : null}
									<View style={{ flex: 1, flexDirection: 'column' }}>
										{this._renderRow(this.state.foundDs)}
									</View>
									<Text style={styles.title}>{translate('DEVICE_PAIRED')}</Text>
									{this.state.loading ? (
										<ActivityIndicator animating={true} />
									) : null}
									<View style={{ flex: 1, flexDirection: 'column' }}>
										{this._renderRow(this.state.pairedDs)}
									</View>

									<View style={{ paddingTop: 10 }}>
										<TouchableOpacity
											disabled={
												this.state.loading ||
												!(
													this.state.bleOpend &&
													this.state.boundAddress.length > 0
												)
											}
											style={(this.state.bleOpend && this.state.boundAddress.length > 0) ? styles.btnFinish : styles.btnFinishDisable}
											onPress={async () => {
												try {
													// await BluetoothEscposPrinter.printPic(base64Jpg, {width: 200, left: 40});
													// await  BluetoothEscposPrinter.printText("\r\n\r\n\r\n", {});
													// await BluetoothEscposPrinter.printPic(this.state.signature, {width: 200, left: 40});
													// await  BluetoothEscposPrinter.printText("\r\n\r\n\r\n", {});
													// await BluetoothEscposPrinter.printPic(base64JpgLogo, {width: 220, left: 20});
													// console.log(this.state.nameCompany)
													// console.log(this.state.driver)
													// console.log(this.state.license_plate)
													//await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.CENTER);
													await BluetoothEscposPrinter.printPic(base64_sopet2, {
														width: 300,
														left: 60,
													});
													//await BluetoothEscposPrinter.printText('\n\r', {})
													await BluetoothEscposPrinter.printerAlign(
														BluetoothEscposPrinter.ALIGN.CENTER,
													);
													await BluetoothEscposPrinter.printText(
														'GAS SOUTH\n\r',
														{
															//encoding: 'GBK',
															//codepage: 0,
															widthtimes: 3,
															heigthtimes: 3,
															fonttype: 1,
														},
													);
													await BluetoothEscposPrinter.printerAlign(
														BluetoothEscposPrinter.ALIGN.CENTER,
													);
													await BluetoothEscposPrinter.printText(
														'\n\r',
														{
															//encoding: 'GBK',
															//codepage: 0,
															widthtimes: 1,
															heigthtimes: 1,
															fonttype: 0,
														},
													);
													await BluetoothEscposPrinter.printText(
														'PHIEU GIAO HANG\n\r',
														{},
													);

													await BluetoothEscposPrinter.printText('\n\r', {});
													await BluetoothEscposPrinter.printerAlign(
														BluetoothEscposPrinter.ALIGN.CENTER,
													);
													await BluetoothEscposPrinter.printColumn(
														[13, 2, 33],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
														],
														[
															'Khach hang',
															': ',
															selectedItemsFullInfo[0]
																? cleanAccents(selectedItemsFullInfo[0].name)
																: '',
														],
														{ fonttype: 1 },
													);
													await BluetoothEscposPrinter.printColumn(
														[13, 2, 33],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
														],
														[
															'Dia chi',
															': ',
															selectedItemsFullInfo[0]
																? cleanAccents(selectedItemsFullInfo[0].address)
																: '',
														],
														{ fonttype: 1 },
													);
													await BluetoothEscposPrinter.printColumn(
														[13, 2, 33],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
														],
														[
															'NV giao hang',
															': ',
															driver ? cleanAccents(driver) : '',
														],
														{ fonttype: 1 },
													);
													await BluetoothEscposPrinter.printColumn(
														[13, 2, 33],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
														],
														[
															'Bien so xe',
															': ',
															license_plate ? license_plate : '',
														],
														{ fonttype: 1 },
													);
													await BluetoothEscposPrinter.printColumn(
														[13, 2, 33],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.LEFT,
														],
														[
															'Ngay gio',
															': ',
															moment(new Date()).format('DD/MM/YYYY, HH:mm:ss'),
														],
														{ fonttype: 3 },
													);
													await BluetoothEscposPrinter.printText('\n\r', {});

													await BluetoothEscposPrinter.printColumn(
														[4, 20, 9, 7],
														[
															BluetoothEscposPrinter.ALIGN.CENTER,
															BluetoothEscposPrinter.ALIGN.CENTER,
															BluetoothEscposPrinter.ALIGN.CENTER,
															BluetoothEscposPrinter.ALIGN.CENTER,
														],
														['STT', 'So serial', 'Binh(Kg)', 'Vo(Kg)'],
														{},
													);
													for (
														let i = 0;
														i < this.props.list_inforCylinder.length;
														i++
													) {
														await BluetoothEscposPrinter.printColumn(
															[4, 20, 9, 7],
															[
																BluetoothEscposPrinter.ALIGN.CENTER,
																BluetoothEscposPrinter.ALIGN.CENTER,
																BluetoothEscposPrinter.ALIGN.CENTER,
																BluetoothEscposPrinter.ALIGN.CENTER,
															],
															[
																(i + 1).toString(),
																this.props.list_inforCylinder[i].serial,
																'45',
																'37.3',
															],
															{},
														);
													}
													// await BluetoothEscposPrinter.printColumn([4, 20, 9, 7],
													//     [BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER],
													//     ['1', 'SPGB0000455', '45', '37.3'], {});
													// await BluetoothEscposPrinter.printColumn([4, 20, 9, 7],
													//     [BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER],
													//     ['2', 'SPGB0000535', '45', '37.6'], {});
													await BluetoothEscposPrinter.printText('\n\r', {});

													//await BluetoothEscposPrinter.setWidth(600)
													await BluetoothEscposPrinter.printColumn(
														[27, 6],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.RIGHT,
														],
														[
															'Da kiem tra an toan va thu bang binh xit xa phong',
															'[ ]',
														],
														{},
													);

													await BluetoothEscposPrinter.printColumn(
														[
															BluetoothEscposPrinter.width58 / 8 / 2,
															BluetoothEscposPrinter.width58 / 8 / 2,
														],
														[
															BluetoothEscposPrinter.ALIGN.LEFT,
															BluetoothEscposPrinter.ALIGN.RIGHT,
														],
														['CONG TY GAS SOUTH', 'DAI DIEN KHACH HANG'],
														{},
													);

													// await BluetoothEscposPrinter.printText('You can upload up to 20 images (max. 1.00 MB each) as JPG, PNG, GIF, WebP, SVG or BMP.\n\r', {})

													// await BluetoothEscposPrinter.printColumn([BluetoothEscposPrinter.width58 / 8 / 3, BluetoothEscposPrinter.width58 / 8 / 3 - 1, BluetoothEscposPrinter.width58 / 8 / 3 - 1],
													//     [BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER],
													//     ["You can upload up to 20 images (max. 1.00 MB each) as JPG, PNG, GIF, WebP, SVG or BMP.", 'testing', '223344'], {fonttype: 1});

													//await BluetoothEscposPrinter.printPic(base64_uncheckBox, {});

													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.LEFT);
													// await BluetoothEscposPrinter.printText('Van chuyen tu: ' + (this.state.nameCompany ? cleanAccents(this.state.nameCompany) : '') + '\n\r', {});
													// await BluetoothEscposPrinter.printText('Van chuyen den:' + (this.props.strFromUser ? cleanAccents(this.props.strFromUser) : '') + '\n\r', {});
													// await BluetoothEscposPrinter.printText('Ngay in: ' + moment(new Date()).format('DD/MM/YYYY, h:mm:ss a') +'\n\r', {});
													// await BluetoothEscposPrinter.printText('Nguoi van chuyen: ' + (this.props.strFromUser ? cleanAccents(this.props.strFromUser) : '') + '\n\r', {});
													// await BluetoothEscposPrinter.printText('Bien so xe: ' + (this.state.license_plate ? this.state.license_plate : '') +'\n\r', {});
													// await BluetoothEscposPrinter.printText('Chu ky: \n\r', {});
													// await BluetoothEscposPrinter.printPic(this.state.signature, {width: 300, left: 40});

													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.CENTER);
													//await BluetoothEscposPrinter.printText("\n\r--------------------------------\n\r\n\r", {});

													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.CENTER);
													// await BluetoothEscposPrinter.setBlob(0);
													// await BluetoothEscposPrinter.printText("广州俊烨\n\r", {
													//     encoding: 'GBK',
													//     codepage: 0,
													//     widthtimes: 3,
													//     heigthtimes: 3,
													//     fonttype: 1
													// });
													// await BluetoothEscposPrinter.setBlob(0);
													// await BluetoothEscposPrinter.printText("销售单\n\r", {
													//     encoding: 'GBK',
													//     codepage: 0,
													//     widthtimes: 0,
													//     heigthtimes: 0,
													//     fonttype: 1
													// });
													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.LEFT);
													// await BluetoothEscposPrinter.printText("客户：零售客户\n\r", {});
													// await BluetoothEscposPrinter.printText("单号：xsd201909210000001\n\r", {});
													// await BluetoothEscposPrinter.printText("日期：" + new Date() + "\n\r", {});
													// await BluetoothEscposPrinter.printText("销售员：18664896621\n\r", {});
													// await BluetoothEscposPrinter.printText("--------------------------------\n\r", {});
													// let columnWidths = [12, 6, 6, 8];
													// await BluetoothEscposPrinter.printColumn(columnWidths,
													//     [BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.RIGHT],
													//     ["商品", '数量', '单价', '金额'], {});
													// await BluetoothEscposPrinter.printColumn(columnWidths,
													//     [BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.RIGHT],
													//     ["React-Native定制开发我是比较长的位置你稍微看看是不是这样?", '1', '32000', '32000'], {});
													// await BluetoothEscposPrinter.printText("\n\r", {});
													// await BluetoothEscposPrinter.printColumn(columnWidths,
													//     [BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.CENTER, BluetoothEscposPrinter.ALIGN.RIGHT],
													//     ["React-Native定制开发我是比较长的位置你稍微看看是不是这样?", '1', '32000', '32000'], {});
													// await BluetoothEscposPrinter.printText("\n\r", {});
													// await BluetoothEscposPrinter.printText("--------------------------------\n\r", {});
													// await BluetoothEscposPrinter.printColumn([12, 8, 12],
													//     [BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.LEFT, BluetoothEscposPrinter.ALIGN.RIGHT],
													//     ["合计", '2', '64000'], {});
													// await BluetoothEscposPrinter.printText("\n\r", {});
													// await BluetoothEscposPrinter.printText("折扣率：100%\n\r", {});
													// await BluetoothEscposPrinter.printText("折扣后应收：64000.00\n\r", {});
													// await BluetoothEscposPrinter.printText("会员卡支付：0.00\n\r", {});
													// await BluetoothEscposPrinter.printText("积分抵扣：0.00\n\r", {});
													// await BluetoothEscposPrinter.printText("支付金额：64000.00\n\r", {});
													// await BluetoothEscposPrinter.printText("结算账户：现金账户\n\r", {});
													// await BluetoothEscposPrinter.printText("备注：无\n\r", {});
													// await BluetoothEscposPrinter.printText("快递单号：无\n\r", {});
													// await BluetoothEscposPrinter.printText("打印时间：" + new Date() + "\n\r", {});
													// await BluetoothEscposPrinter.printText("--------------------------------\n\r", {});
													// await BluetoothEscposPrinter.printText("电话：\n\r", {});
													// await BluetoothEscposPrinter.printText("地址:\n\r\n\r", {});
													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.CENTER);
													// await BluetoothEscposPrinter.printText("欢迎下次光临\n\r\n\r\n\r", {});
													// await BluetoothEscposPrinter.printerAlign(BluetoothEscposPrinter.ALIGN.LEFT);
												} catch (e) {
													Alert.alert('Oops!', e.message || 'ERROR');
												}
											}}
										>
											<Text style={styles.txtFinish}>{translate('SCAN_ACCEPT')}</Text>
										</TouchableOpacity>
										{/* <Button
                                            onPress={this.handleFindCylinder}

                                             >TSC
                                                </Button> */}
									</View>
									{/* // */}
								</WingBlank>
							</Card.Body>
						</Card>
					</Flex.Item>
				</Flex>

				<Modal
					isVisible={this.state.openModal}
					onBackdropPress={() => {
						this.setState({ openModal: false });
					}}
				>
					<View style={{ width: '100%', backgroundColor: '#FFF' }}>
						<View
							style={{
								width: '100%',
								justifyContent: 'center',
								alignItems: 'center',
								flexDirection: 'row',
							}}
						>
							<View style={{ width: '80%' }}>
								<TextField
									label={translate('Current_weight')}
									keyboardType="phone-pad"
									onChangeText={e => {
										this.setState({ weight: e, errorWeight: false });
									}}
									error={this.state.errorWeight ? 'Error' : ''}
								/>

								<TouchableOpacity
									disabled={
										(userType === FACTORY || userType === GENERAL) &&
											cyclinderAction === EXPORT &&
											destinationList.length === 0
											? true
											: false
									}
									onPress={() => {
										if (!this.state.weight) {
											this.setState({
												errorWeight: translate('WEIGHT_IS_REQUIRED'),
											});
										} else {
											this.handleSubmit();
										}
									}}
									style={[styles.btnFinish, { marginVertical: 20 }]}
								>
									<Text style={styles.txtFinish}>{translate('FINISH')}</Text>
								</TouchableOpacity>
							</View>
						</View>
					</View>
				</Modal>
			</ScrollView>
		);
	}

	// Bluetooth
	_renderRow(rows) {
		let items = [];
		for (let i in rows) {
			let row = rows[i];
			if (row.address) {
				items.push(
					<TouchableOpacity
						key={new Date().getTime() + i}
						style={styles.wtf}
						onPress={() => {
							this.setState({
								loading: true,
							});
							BluetoothManager.connect(row.address).then(
								s => {
									this.setState({
										loading: false,
										boundAddress: row.address,
										name: row.name || 'UNKNOWN',
									});
								},
								e => {
									this.setState({
										loading: false,
									});
									Alert.alert('Oops!', e);
								},
							);
						}}
					>
						<Text style={styles.name}>{row.name || 'UNKNOWN'}</Text>
						<Text style={styles.address}>{row.address}</Text>
					</TouchableOpacity>,
				);
			}
		}
		return items;
	}

	_scan() {
		this.setState({
			loading: true,
		});
		BluetoothManager.scanDevices().then(
			s => {
				var ss = s;
				var found = ss.found;
				try {
					found = JSON.parse(found); //@FIX_it: the parse action too weired..
				} catch (e) {
					//ignore
				}
				var fds = this.state.foundDs;
				if (found && found.length) {
					fds = found;
				}
				this.setState({
					foundDs: fds,
					loading: false,
				});
			},
			er => {
				this.setState({
					loading: false,
				});
				Alert.alert('Oops!', 'error' + JSON.stringify(er));
			},
		);
	}
}

export const mapStateToProps = state => ({
	exportPlaceCylinder: state.exportPlaces.exportPlace,
	isAuthLoading: state.auth.loading,
	isCylindersLoading: state.cylinders.loading,
	error: state.auth.error,
	fromUser: state.auth.user.id,
	cyclinder: state.cylinders.cyclinder,
	cylinders: state.cylinders.cylinders,
	cyclinderAction: state.cylinders.cyclinderAction,
	userType: state.auth.user.userType,
	generalList: state.auth.general,
	factoryList: state.auth.factory,
	stationList: state.auth.station,
	agencyList: state.auth.agency,
	typeForPartner: state.cylinders.typeForPartner,
	destinationList: destinationList(state, state),
	listNameDriver: state.auth.listNameDriver,
	id: state.auth.user.id,
	strFromUser: state.auth.user.name,
	list_inforCylinder: state.print.list_inforCylinder,
	nameUser: state.auth.user.name
});

// const getDestination1 = (cyclinderAction, generalList, factoryList, stationList, agencyList, userType) => {
//   // const { cyclinderAction, generalList, factoryList, stationList, agencyList, userType } = this.props
//   if( cyclinderAction === "IMPORT") {
//     if (userType === "Factory") {
//       return [{ id: null, name: 'Người dân'}]
//     }
//     if (userType === "General" || userType === "Station") {
//       return factoryList
//     }
//     if (userType === "Agency") {
//       return generalList
//     }
//   }
//   if(cyclinderAction === "EXPORT"){
//     if (userType === "Factory") {
//       // const outputList = [...generalList,...stationList, ...agencyList]
//       outputList = generalList.concat(stationList, agencyList)
//       return outputList
//     }
//     if (userType === "General") {
//       return agencyList
//     }
//     if (userType === "Station") {
//       return factoryList
//     }
//     if (userType === "Agency") {
//       return [{ id: null, name: 'Người dân'}]
//     }
//   }
//   if( cyclinderAction === "TURN_BACK") {
//     if (userType === "Factory") {
//       return [{ id: null, name: 'Người dân'}]
//     }
//   }
// }
export default connect(mapStateToProps, {
	updateCylinders,
	fetchUsers,
	exportPlace,
	getListDriver,
	returnGas,
	getLstCylinder,
})(Shipper);
